# Notion de listes en Python

**La notion de liste est une notion de conteneur dynamique:**
-on peut ajouter des éléments; on peut retirer des éléments.

__Syntaxiquement__: Une liste est definie par la notation ***"crochet"***
	Ex:```python >>>liste = [] #ceci est une liste vide
				 >>>liste = [2,3,5] #ceci est une liste de 3 nombres premiers```
				 
### Pour savoir si une variable nommée bidule est du type liste, on saisit:
```python >>>isinstance(bidule,list)```
La notion de liste est une notion qui comporte un ***index***.
```python >>>liste = [2,3,5]```
Dans le cas présent, l'élément *2* admet pour index 0, le *3* admet pour index 1, et le *5* admet pour index 2.

### Accès et modification d'un élément particulié dans une liste.
```python >>>tete = liste[0] #recuperation de l'élément de tête de liste 
		  >>>liste = [0] = -2```
#### Tester si un élément en particulié appartient a une liste 
```python >>>6 in [3,5] #récupération de l'élément de tête de liste
		  >>>6 not in[2,3,5] #la reponse sera TRUE```
		  
### Lorsqu'un élément est dans une liste on peut obtenir l'index de sa premiere occurence
```python >>>liste.index(5)```

### Pour avoir le nombre d;'élément dans une liste, on écrit:
```python >>>len(liste) #fonction qui renvoie le nombre d'éléments dans une liste```

### Pour savoir si deuc liste sont égalent, on écrit:
```python >>>[2,3,5] == [5,3,2] #test d'égalité le resultat est false
		  >>>[2,3,5] != [5,3,2] #test de non égalité le resultat est true```
		  

## Construction de listes
Il existe essentiellement **2 méthodes** pour construire une liste:
Construction par ***extension*** et construction par ***comprehension***.
Exemple: __On dispose d'une liste d'entiers et on veut construire une nouvelle liste qui contient les doubles des entiers dans la liste initiale.__
```python
liste_initiale = [2,3,5]															liste_initiale = [2,3,5]
liste_doubles = []																	liste_doubles = [2*entier for entier in liste_initiale]
for entier in liste_initiale:														#ceci est la méthode par compréhension
	liste_doubles.append(2*entier)
#ceci est la méthode par extension```



## Parlons de liste de liste
Exemple:
```python >>>liste = [[1,0,0],[0,1,0],[0,0,1]]
		  >>>liste[0][0] #renvoie la valeur 1
		  >>>liste[0][1] #renvoie la valeur 0
		  >>>liste[1][1] #renvoie la valeur 1```

**Remarque**:il existe une notion assez similaire a la notion de liste en python, c'est la notion de ***tuple*** ( en francais on dit un __uplet__ )
```python >>>mon_joli_tuple = (5,3,2)```

La notion de tuple est ***statique***( ou immuable, non muable )
une *bizarrerie*
```python >>>liste = [1]
		  >>> isinstance(liste,list) #true
		  >>>t = (1) #ceci n'est pas un tuple
		  >>>t = (1,) #ceci est un tuple```


## Mini problème:
On lance 2 dès et on veut écrire l'univers
```python univers = [[1,1],[1,2],[1,3],[1,4]...[6,6]]```
On indique comment obtenir cette liste a l'aide de python

**Par extension**
```python
univers = []
for de_1 in[1,2,3,4,5,6]:
	for de_2 in[1,2,3,4,5,6]:
		univers;append((de_1, de_2))```
		
**Par comprehension**
```python
univers_bis = [(de_1, de_2)for de_1 in[1,2,3,4,5,6]for de_2 in[1,2,3,4,5,6]```

#### Simulons étape par étape le code suivant:
```python
univers = []
for var1 in[1,2,3]:
	for var2 in[4,5,6]:
		univers.append([var1, var2])```
		
->entrée dans la boucle principal *'for'*
A __l'itérration__ 1, **var1** prend la valeur **1**
	->entrée dans la boucle **imbriquée**
	A la première __ittération__ de cette boucle imbriquée, **var2** prend la valeur **4**.
```python 
univers = [[1, 4]]```
A __l'ittération__ 2 de la boucle imbriquée, **var2** prend la valeur **5**.
```python 
univers = [[1, 4], [1, 5]]```
A la troisième __ittération__ de la boucle imbriquée, **var2** prend la valeur **6**.
```python 
univers = [[1, 4], [1, 5], [1, 6]]```
*Le travail est términé avec la boucle imbriquée, python revient donc à la boucle principale au niveau d'une 2ème ittération*
A la 2ème __ittération__ de la boucle principale, **var1** va prendre la valeur **2**

*on continue ainsi jusqu'a [[1,4]...[3,6]]*
